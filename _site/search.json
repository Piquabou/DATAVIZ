[
  {
    "objectID": "datap.html",
    "href": "datap.html",
    "title": "Avant de commencer avec Python",
    "section": "",
    "text": "Pour la data visualisation en Python, il est essentiel de maîtriser deux bibliothèques : Numpy et Pandas"
  },
  {
    "objectID": "datap.html#numpy",
    "href": "datap.html#numpy",
    "title": "Avant de commencer avec Python",
    "section": "NumPy",
    "text": "NumPy\nNumPy est une bibliothèque Python qui offre un support pour travailler avec des tableaux multidimensionnels (appelés ndarray) et des fonctions mathématiques pour manipuler ces tableaux. Voici quelques-unes de ses principales caractéristiques :\n\n\nTableaux multidimensionnels : NumPy offre une structure de données appelée ndarray, qui permet de stocker des tableaux multidimensionnels de manière efficace. Les tableaux NumPy sont homogènes et peuvent contenir des éléments de même type.\n\nCalculs mathématiques : NumPy propose un large éventail de fonctions mathématiques pour effectuer des opérations sur les tableaux, telles que les opérations arithmétiques, les opérations de statistiques, les opérations de transformation, etc.\n\nIndexation et tranchage : NumPy offre des fonctionnalités puissantes pour l’indexation et le tranchage des tableaux, ce qui permet d’accéder et de manipuler facilement des sous-ensembles de données."
  },
  {
    "objectID": "datap.html#pandas",
    "href": "datap.html#pandas",
    "title": "Avant de commencer avec Python",
    "section": "Pandas",
    "text": "Pandas\nPandas est une bibliothèque Python qui offre des structures de données et des fonctions pour la manipulation et l’analyse des données tabulaires. Voici quelques-unes de ses principales caractéristiques :\n\n\nDataFrame : Le DataFrame est la structure de données principale de Pandas, qui permet de stocker et de manipuler des données tabulaires à deux dimensions, similaires à une feuille de calcul Excel ou une table de base de données.\n\nSéries : Pandas propose également une structure de données appelée Series, qui est une structure unidimensionnelle similaire à un tableau unidimensionnel ou à une colonne d’un DataFrame.\n\nIndexation flexible : Pandas offre des fonctionnalités d’indexation flexibles qui permettent d’accéder et de manipuler les données de manière intuitive, y compris l’indexation par des étiquettes, des positions, des conditions booléennes, etc.\n\nFonctionnalités d’analyse des données : Pandas propose un large éventail de fonctionnalités pour l’analyse des données, y compris le regroupement, l’agrégation, la fusion, le tri, le filtrage, le nettoyage des données manquantes, etc."
  },
  {
    "objectID": "datap.html#les-différentes-bibliothèques",
    "href": "datap.html#les-différentes-bibliothèques",
    "title": "Avant de commencer avec Python",
    "section": "Les différentes bibliothèques",
    "text": "Les différentes bibliothèques\nPour ce cours, nous aurons besoin de trois bibliothèques :\n\n\nMatplotlib\n\nSeaborn\n\nPlotly\n\n\nPour installer les bibliothèques :\n\n\nOuvrez une fenêtre de terminal.\n\nTapez la commande suivant ce que vous voulez installer et appuiez sur Entrée :\n\nPour installer Matplotlib : pip install matplotlib\nPour installer Seaborn : pip install seaborn\nPour installer Plotly : pip install plotly"
  },
  {
    "objectID": "datap.html#créer-des-graphiques-avec-matplotlib",
    "href": "datap.html#créer-des-graphiques-avec-matplotlib",
    "title": "Avant de commencer avec Python",
    "section": "Créer des graphiques avec Matplotlib",
    "text": "Créer des graphiques avec Matplotlib\n\nGraphique linéaire\nUn graphique linéaire est utilisé pour représenter graphiquement la relation entre deux variables continues.\n\nimport matplotlib.pyplot as plt  # Importe la bibliothèque de visualisation Matplotlib\n\n# Données pour l'axe des abscisses (x) et des ordonnées (y)\nx = [1, 2, 3, 4, 5] # Valeurs de l'axe des abscisses\ny = [2, 3, 5, 7, 11] # Valeurs de l'axe des ordonnées correspondantes\n\n# Création du graphique linéaire\nplt.plot(x, y)  # Trace un graphique linéaire avec les données fournies\n\n# Ajout de titre et d'étiquettes d'axe\nplt.title('Graphique linéaire simple')  # Ajoute un titre au graphique\nplt.xlabel('Axe des abscisses')  # Définit le label de l'axe des abscisses\nplt.ylabel('Axe des ordonnées')  # Définit le label de l'axe des ordonnées\n\n# Affichage du graphique\nplt.show()  # Affiche le graphique à l'écran\n\n\n\n\n\n\n\n\n\n\nHistogramme\nUn histogramme est un type de graphique utilisé pour représenter la distribution des valeurs d’une variable continue ou discrète.\n\nimport matplotlib.pyplot as plt  # Importe la bibliothèque pour la visualisation\nimport numpy as np  # Importe la bibliothèque pour les opérations numériques\n\n# Génération de données aléatoires suivant une distribution normale\n\n# Initialise le générateur de nombres aléatoires pour la reproductibilité\nnp.random.seed(0)\n\n# Génère 1000 points de données avec une distribution normale standard\ndata = np.random.randn(1000)\n\n# Création de l'histogramme\n\n# Trace un histogramme avec 30 intervalles (bins), coloré en orange avec des bords noirs\nplt.hist(data, bins=30, color='orange', edgecolor='black')\n\n# Ajout de titre et d'étiquettes d'axe\nplt.title('Exemple d\\'histogramme')  # Ajoute un titre au graphique\nplt.xlabel('Valeurs')  # Ajoute une étiquette à l'axe des abscisses\nplt.ylabel('Fréquence')  # Ajoute une étiquette à l'axe des ordonnées\n\n# Affichage de l'histogramme\nplt.show()  # Montre le graphique à l'écran\n\n\n\n\n\n\n\n\n\n\nDiagramme à barre\nUn diagramme à barres est un type de graphique utilisé pour représenter graphiquement des données catégorielles, où chaque catégorie est représentée par une barre dont la longueur correspond à la valeur associée à cette catégorie.\n\nimport matplotlib.pyplot as plt  # Importe la bibliothèque de visualisation graphique\n\n# Données\nproduits = ['Produit A', 'Produit B', 'Produit C', 'Produit D']  # Noms des produits\nventes = [350, 480, 300, 600]  # Ventes mensuelles de chaque produit\n\n# Création du diagramme à barres\n\n# Crée des barres roses avec bordure noire pour représenter les ventes\nplt.bar(produits, ventes, color='pink', edgecolor='black')\n\n# Ajout de titre et d'étiquettes d'axe\n\n# Définit le titre du graphique\nplt.title('Comparaison des ventes mensuelles par produit')\nplt.xlabel('Produits')  # Ajoute une étiquette à l'axe des abscisses\nplt.ylabel('Ventes mensuelles')  # Ajoute une étiquette à l'axe des ordonnées\n\n# Affichage du diagramme à barres\nplt.show()\n\n\n\n\n\n\n\n\n\n\nScatterplot\nUn scatterplot, ou nuage de points en français, est un type de graphique utilisé pour représenter graphiquement la relation entre deux variables continues.\n\nimport matplotlib.pyplot as plt  # Importe la bibliothèque de visualisation graphique Matplotlib\nimport numpy as np  # Importe la bibliothèque pour les calculs numériques NumPy\n\n# Génération de données aléatoires\n\n# Fixe la graine du générateur de nombres aléatoires pour la reproductibilité\nnp.random.seed(0)\n\n# Génère 100 valeurs normalement distribuées pour x\nx = np.random.randn(100)  # Génère 100 valeurs normalement distribuées pour x\n\n  # Crée y à partir de x en ajoutant une relation linéaire et du bruit aléatoire\ny = 2 * x + np.random.randn(100)\n\n# Création du scatterplot\n\n# Trace un graphique de dispersion des points x et y avec une transparence de 0.7\nplt.scatter(x, y, color='green', alpha=0.7)\n\n# Ajout de titre et d'étiquettes d'axe\nplt.title('Exemple de scatterplot')  # Ajoute un titre au graphique\nplt.xlabel('Variable X')  # Définit l'étiquette de l'axe des abscisses\nplt.ylabel('Variable Y')  # Définit l'étiquette de l'axe des ordonnées\n\n# Affichage du scatterplot\nplt.show()  # Montre le graphique à l'écran\n\n\n\n\n\n\n\n\n\n\nPieplot\nUn pieplot, ça sert pas à grand chose, c’est illisible et moche\n\nimport matplotlib.pyplot as plt  # Importe la bibliothèque de visualisation graphique Matplotlib\n\n# Données\nlabels = ['Non', 'Non en rouge']  # Étiquettes pour chaque segment du pie plot\nsizes = [80, 20]  # Pourcentage représentant la taille de chaque segment\n\n# Création du pie plot\nplt.figure(figsize=(8, 6))  # Définit la taille de la figure pour le pie plot\n\n# Crée le pie plot avec les pourcentages affichés et les couleurs spécifiées\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=['blue', 'red'])\n\n# Ajout de titre\nplt.title('Faut-il faire des camenberts ?')  # Ajoute un titre au pie plot\n\n# Affichage du pie plot\nplt.show()  # Affiche le graphique"
  },
  {
    "objectID": "datap.html#personnaliser-des-graphiques",
    "href": "datap.html#personnaliser-des-graphiques",
    "title": "Avant de commencer avec Python",
    "section": "Personnaliser des graphiques",
    "text": "Personnaliser des graphiques\nVoici quelques-unes des façons de personnaliser un graphique avec Matplotlib :\n\nCouleur et style : Tu peux spécifier la couleur et le style utilisés dans un graphique à l’aide des arguments color et linestyle (ou marker) dans les fonctions de traçage.\n\n\n# Importe la bibliothèque de visualisation graphique Matplotlib\nimport matplotlib.pyplot as plt\n\n# Données pour le graphique\n# Données de l'axe des abscisses (par exemple, âges)\nx = [25, 30, 35, 40, 45]\n\n# Données de l'axe des ordonnées (par exemple, salaires)\ny = [50000, 60000, 70000, 80000, 90000]\n\n# Noms associés à chaque paire de données\nnoms = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emma\"]\n\n# Couleurs spécifiées pour chaque barre, mappées par nom\ncouleurs = {'Alice': '#EB9C64', 'Bob': '#FF8789', 'Charlie': '#8FBF9F', \n'David': '#346145', 'Emma': '#554E4F'}\n\n# Tracer le graphique en barres\nfor i in range(len(x)):\n\n# Crée une barre pour chaque entrée, avec une couleur et une étiquette spécifique\n    plt.bar(x[i], y[i], color=couleurs[noms[i]], label=noms[i])\n\n# Ajout de légendes au graphique\nplt.legend()  # Affiche une légende pour identifier les barres par le nom\n\n# Configuration des axes et titre\nplt.xlabel('Age')  # Ajoute une étiquette à l'axe des abscisses\nplt.ylabel('Salaire')  # Ajoute une étiquette à l'axe des ordonnées\nplt.title('Salaire par Age et Personne')  # Ajoute un titre au graphique\n\n# Affichage du graphique\nplt.show()  # Montre le graphique à l'écran\n\n\n\n\n\n\n\n\n\nTitre et étiquettes d’axe : Tu peux ajouter un titre à ton graphique à l’aide de la fonction plt.title(). De même, tu peux ajouter des étiquettes à l’axe des abscisses et à l’axe des ordonnées avec plt.xlabel() et plt.ylabel() respectivement.\n\n\n# Tracer le graphique\nfor i in range(len(x)):\n    # Trace une barre pour chaque élément avec couleur et étiquette correspondantes\n    plt.bar(x[i], y[i], color=couleurs[noms[i]], label=noms[i])\n\n# Ajouter une légende pour identifier chaque barre par son nom\nplt.legend()\n\n# Ajouter un titre et des étiquettes d'axe pour clarifier les données présentées\nplt.title(\"Salaire en fonction de l'âge\")  # Titre du graphique\nplt.xlabel(\"Âge (ans)\")  # Étiquette de l'axe des abscisses\nplt.ylabel(\"Salaire (€)\")  # Étiquette de l'axe des ordonnées\n\n# Afficher le graphique à l'écran\nplt.show()\n\n\n\n\n\n\n\n\n\nLégendes : Si ton graphique comporte plusieurs séries de données, tu peux ajouter une légende pour les distinguer à l’aide de la fonction plt.legend(). Tu peux spécifier les noms des séries de données dans la légende en utilisant l’argument label dans les fonctions de traçage.\n\n\n# Tracer le graphique\nfor i in range(len(x)):\n    plt.bar(x[i], y[i], color=couleurs[noms[i]], label=noms[i])\n\n# Ajouter une légende\nplt.legend()\n\n# Afficher le graphique\nplt.show()"
  },
  {
    "objectID": "datap.html#créer-des-graphiques-avec-seaborn",
    "href": "datap.html#créer-des-graphiques-avec-seaborn",
    "title": "Avant de commencer avec Python",
    "section": "Créer des graphiques avec Seaborn",
    "text": "Créer des graphiques avec Seaborn\n\nGraphique statistique\nLes graphiques statistiques sont des outils essentiels pour explorer, analyser, communiquer et prendre des décisions basées sur les données.\n\n# Importe Seaborn pour la visualisation statistique avancée\nimport seaborn as sns\n\n# Importe Matplotlib pour les personnalisations graphiques\nimport matplotlib.pyplot as plt\n\n# Importe NumPy pour la manipulation numérique\nimport numpy as np\n\n# Génération de données aléatoires\n\n# Fixe la graine du générateur de nombres aléatoires pour la reproductibilité\nnp.random.seed(0)\n\n# Génère 100 valeurs aléatoires suivant une distribution normale\ndata = np.random.randn(100)\n\n# Création du graphique de densité avec Seaborn\n\n# Trace un histogramme avec estimation de densité, coloré en bleu\nsns.histplot(data, kde=True, color='blue')\n\n# Ajout de titre et d'étiquettes d'axe\nplt.title('Graphique de densité avec Seaborn')  # Ajoute un titre au graphique\nplt.xlabel('Valeurs')  # Définit l'étiquette pour l'axe des abscisses\nplt.ylabel('Densité')  # Définit l'étiquette pour l'axe des ordonnées\n\n# Affichage du graphique\nplt.show()  # Affiche le graphique à l'écran\n\n\n\n\n\n\n\n\n\n\nHeatmap\nUne heatmap, ou carte de chaleur en français, est un type de graphique qui utilise des couleurs pour représenter des données tabulaires sous forme de matrice. Les heatmaps sont particulièrement utiles pour visualiser les relations et les tendances dans les données, en mettant en évidence les valeurs élevées et faibles à travers différentes nuances de couleur.\n\n# Importe Seaborn pour des visualisations statistiques avancées\nimport seaborn as sns\n\n# Importe Matplotlib pour la personnalisation de graphiques\nimport matplotlib.pyplot as plt\n\n# Importe NumPy pour la manipulation de données numériques\nimport numpy as np\n\n# Génération de données aléatoires pour la heatmap\n\n# Initialise le générateur de nombres aléatoires pour la reproductibilité\nnp.random.seed(0)\n\n# Crée une matrice 10x10 de nombres aléatoires entre 0 et 1\ndata = np.random.rand(10, 10)\n\n# Création de la heatmap avec Seaborn\n\n# Utilise la fonction heatmap de Seaborn pour visualiser la matrice de données\nsns.heatmap(data)  \n\nplt.title('Exemple de Heatmap')  # Ajoute un titre au graphique\n\n# Affichage de la heatmap\nplt.show()  # Affiche la carte de chaleur à l'écran"
  },
  {
    "objectID": "datap.html#personnaliser-des-graphiques-1",
    "href": "datap.html#personnaliser-des-graphiques-1",
    "title": "Avant de commencer avec Python",
    "section": "Personnaliser des graphiques",
    "text": "Personnaliser des graphiques\nPersonnaliser des graphiques avec Seaborn offre plusieurs avantages et permet d’ajouter des détails visuels pour mieux communiquer les résultats de manière efficace.\nVoici quelques raisons pour lesquelles la personnalisation des graphiques avec Seaborn est utile :\n\nAméliorer l’esthétique : Seaborn propose des palettes de couleurs esthétiques et des styles de graphiques prédéfinis qui améliorent l’apparence des graphiques. En personnalisant les couleurs, les styles de lignes, les marqueurs et les polices, les graphiques deviennent plus attrayants visuellement.\nFaciliter la lecture : En ajustant les étiquettes d’axe, les titres, les légendes et les annotations, il est possible de rendre les graphiques plus clairs et plus faciles à lire. Une bonne personnalisation permet de mettre en évidence les points clés et de guider le regard du lecteur vers les informations importantes.\nAdapter le graphique au public cible : La personnalisation permet d’adapter le graphique au public cible en choisissant des couleurs, des styles et des annotations appropriés. Par exemple, un graphique destiné à un public professionnel peut avoir une apparence plus formelle, tandis qu’un graphique destiné à un public plus jeune peut être plus ludique et coloré.\n\n\nExemple de personnalisation\n\n# Importe Seaborn pour des visualisations statistiques avancées\nimport seaborn as sns\n\n# Importe Matplotlib pour la personnalisation de graphiques\nimport matplotlib.pyplot as plt\n\n# Importe NumPy pour la manipulation de données numériques\nimport numpy as np  \n\n# Génération de données aléatoires pour la heatmap\n\n# Initialise le générateur de nombres aléatoires pour la reproductibilité\nnp.random.seed(0)\n\n# Crée une matrice 10x10 de nombres aléatoires entre 0 et 1\ndata = np.random.rand(10, 10)  \n\n# Création de la heatmap avec Seaborn\n\n# Utilise la fonction heatmap de Seaborn pour visualiser la matrice de données\nsns.heatmap(data)\n\n# Ajout de titre\nplt.title('Exemple de Heatmap')  # Ajoute un titre au graphique\n\n# Affichage de la heatmap\nplt.show()  # Affiche la carte de chaleur à l'écran"
  },
  {
    "objectID": "datap.html#créer-des-graphiques-avec-plotly",
    "href": "datap.html#créer-des-graphiques-avec-plotly",
    "title": "Avant de commencer avec Python",
    "section": "Créer des graphiques avec plotly",
    "text": "Créer des graphiques avec plotly\n\nScatterplot interactif\nUn scatterplot interactif est un type de graphique où les points de données sont affichés sur un plan cartésien et où l’utilisateur peut interagir avec le graphique pour explorer les données de manière dynamique.\n\n# Importe Plotly Express pour la visualisation interactive\nimport plotly.express as px\n\n# Importe pandas pour la manipulation de données\nimport pandas as pd\n\n# Importe numpy pour les opérations numériques\nimport numpy as np\n\n# Création de données aléatoires\n\n# Fixe la graine du générateur de nombres aléatoires pour la reproductibilité\nnp.random.seed(0)\ndata = {\n    # 100 valeurs aléatoires normalement distribuées pour l'axe X\n    'X': np.random.randn(100),  \n    # 100 valeurs aléatoires normalement distribuées pour l'axe Y\n    'Y': np.random.randn(100),  \n    # 100 valeurs aléatoires pour la taille des marqueurs\n    'Z': np.random.rand(100) * 100,  \n    # 100 valeurs aléatoires pour la couleur des marqueurs\n    'Color': np.random.rand(100) * 100 \n}\ndf = pd.DataFrame(data)  # Convertit le dictionnaire en DataFrame pandas\n\n# Création du scatterplot interactif avec Plotly Express\nfig = px.scatter(df, x='X', y='Y', size='Z', color='Color', hover_name=df.index)\n# 'x' et 'y' définissent les axes, 'size' et 'color' ajustent la taille et la couleur \n# des marqueurs, 'hover_name' ajoute des étiquettes interactives\n\n# Personnalisation du titre et des axes\nfig.update_layout(\n    title='Scatterplot interactif avec Plotly',  # Définit le titre du graphique\n    xaxis_title='Axe X',  # Nomme l'axe X\n    yaxis_title='Axe Y'  # Nomme l'axe Y\n)\n\n# Affichage du scatterplot interactif\nfig.show()  # Montre le graphique dans un navigateur web ou une interface Jupyter\n\n                                                \n\n\n\n\nDiagramme à barre interactif\nles diagrammes à barres interactifs avec Plotly sont des outils puissants pour explorer, analyser et communiquer les données de manière dynamique.\n\n# Importe Plotly Express pour des visualisations interactives\nimport plotly.express as px\n\n# Importe pandas pour la gestion des données\nimport pandas as pd\n\n# Création de données fictives\ndata = {\n    'Catégorie': ['A', 'B', 'C', 'D'],  # Catégories du diagramme\n    'Valeur': [30, 50, 40, 60]  # Valeurs associées à chaque catégorie\n}\n\n# Convertit le dictionnaire en DataFrame pour faciliter l'utilisation avec Plotly\ndf = pd.DataFrame(data)\n\n# Création du diagramme à barres interactif avec Plotly Express\nfig = px.bar(df, x='Catégorie', y='Valeur', \ntitle='Diagramme à barres interactif avec Plotly')\n\n# 'x' spécifie la colonne pour l'axe des abscisses, 'y' pour l'axe des ordonnées, \n# 'title' ajoute un titre au graphique\n\n# Affichage du diagramme à barres interactif\nfig.show()  # Montre le diagramme dans un navigateur web ou une interface Jupyter\n\n                                                \n\n\n\n\nGraphique en surface 3D\nLes graphiques en surface 3D, également connus sous le nom de graphiques en relief ou graphiques en trois dimensions, sont utilisés pour représenter des fonctions ou des ensembles de données tridimensionnels.\n\n# Importe Plotly Graph Objects pour des visualisations complexes\nimport plotly.graph_objects as go\n\n# Importe pandas pour la manipulation des données\nimport pandas as pd\n\n# Chargement des données\ndata_url='https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv'\n\n# Télécharge et charge les données d'élévation du Mont Bruno depuis une URL en ligne\ndf = pd.read_csv(data_url)\n\n# Création du graphique en surface 3D avec Plotly\nfig = go.Figure(data=[go.Surface(z=df.values)])\n# Crée un objet figure avec un graphique en surface 3D\n# 'z=df.values' définit les valeurs de l'élévation comme axe z du graphique en surface\n\n# Personnalisation du titre et des axes\nfig.update_layout(\n    title='Elevation du Mont Bruno en 3D',  # Définit le titre du graphique\n    scene=dict(\n        xaxis_title='Longitude',  # Nomme l'axe x comme 'Longitude'\n        yaxis_title='Latitude',  # Nomme l'axe y comme 'Latitude'\n        zaxis_title='Altitude'  # Nomme l'axe z comme 'Altitude'\n    )\n)\n\n# Affichage du graphique en surface 3D\n# Affiche le graphique, généralement dans un navigateur web ou une interface Jupyter\nfig.show()\n\n                                                \n\n\n\nMaintenant que vous savez créer des graphiques avec Python, passons aux exercices !"
  },
  {
    "objectID": "exercices_r.html",
    "href": "exercices_r.html",
    "title": "DATAVIZ",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "exercices.html",
    "href": "exercices.html",
    "title": "DATAVIZ",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "exercices_python.html",
    "href": "exercices_python.html",
    "title": "DATAVIZ",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "accueil.html",
    "href": "accueil.html",
    "title": "DATAVIZ",
    "section": "",
    "text": "Figure 1: Blog-thumbnail.png.\n\n\n\n\nExplorez le pouvoir de la Data Visualisation avec R et Python\n\n\nSaviez-vous que vos données ont des histoires à raconter ?\n\n\nDécouvrez comment les visualiser avec R et Python!\n\n\nBienvenue sur DATAVIZ, le site dédié à la data visualisation avec R et Python. Ici, vous trouverez tout ce dont vous avez besoin pour transformer vos données brutes en visualisations informatives et percutantes. Que vous soyez novice ou utilisateur expérimenté, plongez dans le monde fascinant de la visualisation de données et découvrez comment R et Python peuvent vous aider à créer des graphiques qui captivent et informent.\nCe que vous trouverez sur ce site :\n\n\nDes tutoriels pas à pas pour apprendre les bases de la visualisation de données avec ces deux langages.\n\n\nDes astuces et des techniques avancées pour créer des graphiques interactifs et dynamiques.\n\n\nDes exemples pratiques et des exercices pour vous inspirer dans vos propres projets de visualisation de données.\n\n\nPrêt à commencer ? Explorez nos ressources dès maintenant et laissez vos données raconter leur histoire !\n📈 Commencer l’exploration avec R  📊 Commencer l’exploration avec Python\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "À Propos",
    "section": "",
    "text": "Moi c’est Ellen, je suis une étudiante en Bachelor 1 à l’IA School de Toulouse.\nDans la vie, j’aime les pâtes au thon et la data science.\nC’est pour cela que je fais un Bachelor en data science / analysis.\nC’est avec elle que j’ai appris beaucoup de choses, c’est ma prof elle, elle est sympa.\n\n\n\n Back to top"
  },
  {
    "objectID": "datar.html",
    "href": "datar.html",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Faire des graphiques est un moyen puissant de transformer des données brutes en informations exploitables et de les communiquer de manière efficace à un public diversifié. Cela joue un rôle crucial dans la prise de décision, la résolution de problèmes et la génération de nouvelles connaissances.\n\n\nUn barplot, ou diagramme à barres, est un type de visualisation de données qui représente les données sous forme de barres rectangulaires. Chaque barre représente une catégorie spécifique, et la hauteur de la barre est proportionnelle à une valeur numérique associée à cette catégorie.\n\nlibrary(ggplot2)\n\n\n# Création d'un data frame d'exemple\ndata &lt;- data.frame(\n  Catégorie = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n  Valeur = c(20, 35, 15, 30, 25)\n)\n\n# Création du barplot avec ggplot2\nggplot(data, aes(x = Catégorie, y = Valeur)) +\n\n# Barres bleues, hauteur = valeurs des données\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +  \n\n  # Ajout de titres et étiquettes\n  labs(title = \"Exemple de Barplot\", x = \"Catégorie\", y = \"Valeur\")\n\n\n\n\n\n\n\n\n\n\n\nUn histogramme est utilisé pour représenter la distribution des valeurs d’une seule variable quantitative, en divisant la plage des valeurs en intervalles et en comptant le nombre d’observations dans chaque intervalle.\n\n# Création d'un nouveau data.frame\n\nnoms_produits &lt;- c(\"Produit A\", \"Produit B\", \"Produit C\",\n\"Produit D\", \"Produit E\")\nmois &lt;- rep(c(\"Janvier\", \"Février\", \"Mars\", \"Avril\"),\neach = length(noms_produits))\nventes &lt;- round(runif(length(noms_produits) * length(unique(mois)), \nmin = 100, max = 500))\n\ndata2 &lt;- data.frame(\n  Produit = rep(noms_produits, times = length(unique(mois))),\n  Mois = mois,\n  Ventes = ventes\n)\n\n\n# Création d'un histogramme pour visualiser la distribution des ventes mensuelles\n\nggplot(data2, aes(x = Ventes)) +\n\n# Histogramme bleu avec bord noir\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +  \n\n\n# Titres et étiquettes\n  labs(title = \"Histogramme des ventes mensuelles\", x = \"Ventes\", \n  y = \"Fréquence\")\n\n\n\n\n\n\n\n\n\n\n\nUn scatterplot, également connu sous le nom de nuage de points, est une visualisation de données qui représente les valeurs de deux variables quantitatives sur un plan cartésien. Chaque point sur le graphique représente une paire de valeurs, une pour chaque variable. L’axe horizontal (axe des x) représente généralement une variable, tandis que l’axe vertical (axe des y) représente l’autre variable.\n\n# Création de données d'exemple \n\n# (Pour la reproductibilité)\nset.seed(123)\n\n# Nombre de points\nn &lt;- 50\n\n# Données pour l'axe x (distribution normale)\nx &lt;- rnorm(n, mean = 10, sd = 3)\n\n# Données pour l'axe y (relation linéaire avec x + bruit)\ny &lt;- 2*x + rnorm(n, mean = 0, sd = 5)\n\n# Création d'un scatterplot pour visualiser la relation entre les variables x et y\nplot(x, y, main = \"Scatterplot avec Données Simulées\", \n\n# Points bleus, ronds pleins\nxlab = \"X\", ylab = \"Y\", col = \"blue\", pch = 16)  \n\n\n\n\n\n\n\n\n\n\n\nUn boxplot, également connu sous le nom de boîte à moustaches, est un type de visualisation de données qui représente graphiquement la distribution des données et permet de visualiser la médiane, les quartiles et les valeurs aberrantes éventuelles d’un ensemble de données.\n\n# Convertir la variable \"Mois\" en facteur avec un ordre spécifique des niveaux\ndata2$Mois &lt;- factor(data2$Mois, levels = c(\"Janvier\", \"Février\", \"Mars\", \"Avril\"))\n\n# Création du boxplot avec ggplot2\n\n# Boxplot avec coloration par mois\nggplot(data2, aes(x = Mois, y = Ventes, fill = Mois)) +\ngeom_boxplot() +\n\n# Titres et légendes\nlabs(title = \"Boxplot des ventes mensuelles\", x = \"Mois\", y = \"Ventes\", fill = \"Mois\") +  \n\n# Étiquettes de l'axe x inclinées\ntheme(axis.text.x = element_text(angle = 45, hjust = 1)) \n\n\n\n\n\n\n\n\n\n\n\nUn lines plot, également appelé line chart ou graphique linéaire, est une forme de visualisation de données qui représente la relation entre deux variables quantitatives en traçant des points de données connectés par des lignes droites. Il est couramment utilisé pour montrer l’évolution ou les tendances des données sur une période de temps ou dans une séquence ordonnée.\n\n# Création du lines plot avec ggplot2\n\n# Lignes par produit\nggplot(data2, aes(x = Mois, y = Ventes, color = Produit, group = Produit)) +\ngeom_line() +\n\n# Points pour marquer les données\ngeom_point(size = 3) +\n\n# Titres et légendes\nlabs(title = \"Evolution des ventes mensuelles par produit\", x = \"Mois\", y = \"Ventes\", \ncolor = \"Produit\") +\n\n# Étiquettes de l'axe x inclinées\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\nUn pieplot, c’est un peu beaucoup inutile, et c’est moche en plus.\n\n# Charger les packages nécessaires\nlibrary(ggplot2)\n\n# Créer un dataframe avec vos données\n# Ces valeurs représentent les pourcentages pour chaque catégorie\ndonnees &lt;- data.frame(\n  categorie = c(\"Non\", \"Non en rouge\"),\n  valeur = c(80, 20)\n)\n\n# Créer le pie plot\ngraphique_pie &lt;- ggplot(donnees, aes(x = \"\", y = valeur, fill = categorie)) +\n\n  geom_bar(stat = \"identity\", width = 1) +\n  # Utiliser des coordonnées polaires pour le graphique en secteurs\n  coord_polar(\"y\", start = 0) +\n\n# Ajouter un titre\n  labs(title = \"Faut-il faire des camenberts ?\") +\n\n# Couleur bleue pour \"Non\" et rouge pour \"Non en rouge\"\n  scale_fill_manual(values = c(\"#1f77b4\", \"red\")) +\n\n# Supprimer les axes et le fond\n  theme_void() +\n\n# Placer la légende à droite du graphique\n  theme(legend.position = \"right\")\n\n# Afficher le pie plot\nprint(graphique_pie)"
  },
  {
    "objectID": "datar.html#barplot",
    "href": "datar.html#barplot",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Un barplot, ou diagramme à barres, est un type de visualisation de données qui représente les données sous forme de barres rectangulaires. Chaque barre représente une catégorie spécifique, et la hauteur de la barre est proportionnelle à une valeur numérique associée à cette catégorie.\n\nlibrary(ggplot2)\n\n\n# Création d'un data frame d'exemple\ndata &lt;- data.frame(\n  Catégorie = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n  Valeur = c(20, 35, 15, 30, 25)\n)\n\n# Création du barplot avec ggplot2\nggplot(data, aes(x = Catégorie, y = Valeur)) +\n\n# Barres bleues, hauteur = valeurs des données\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +  \n\n  # Ajout de titres et étiquettes\n  labs(title = \"Exemple de Barplot\", x = \"Catégorie\", y = \"Valeur\")"
  },
  {
    "objectID": "datar.html#histogrammes",
    "href": "datar.html#histogrammes",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Un histogramme est utilisé pour représenter la distribution des valeurs d’une seule variable quantitative, en divisant la plage des valeurs en intervalles et en comptant le nombre d’observations dans chaque intervalle.\n\n# Création d'un nouveau data.frame\n\nnoms_produits &lt;- c(\"Produit A\", \"Produit B\", \"Produit C\",\n\"Produit D\", \"Produit E\")\nmois &lt;- rep(c(\"Janvier\", \"Février\", \"Mars\", \"Avril\"),\neach = length(noms_produits))\nventes &lt;- round(runif(length(noms_produits) * length(unique(mois)), \nmin = 100, max = 500))\n\ndata2 &lt;- data.frame(\n  Produit = rep(noms_produits, times = length(unique(mois))),\n  Mois = mois,\n  Ventes = ventes\n)\n\n\n# Création d'un histogramme pour visualiser la distribution des ventes mensuelles\n\nggplot(data2, aes(x = Ventes)) +\n\n# Histogramme bleu avec bord noir\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +  \n\n\n# Titres et étiquettes\n  labs(title = \"Histogramme des ventes mensuelles\", x = \"Ventes\", \n  y = \"Fréquence\")"
  },
  {
    "objectID": "datar.html#scatterplot-et-jitter",
    "href": "datar.html#scatterplot-et-jitter",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Un scatterplot, également connu sous le nom de nuage de points, est une visualisation de données qui représente les valeurs de deux variables quantitatives sur un plan cartésien. Chaque point sur le graphique représente une paire de valeurs, une pour chaque variable. L’axe horizontal (axe des x) représente généralement une variable, tandis que l’axe vertical (axe des y) représente l’autre variable.\n\n# Création de données d'exemple \n\n# (Pour la reproductibilité)\nset.seed(123)\n\n# Nombre de points\nn &lt;- 50\n\n# Données pour l'axe x (distribution normale)\nx &lt;- rnorm(n, mean = 10, sd = 3)\n\n# Données pour l'axe y (relation linéaire avec x + bruit)\ny &lt;- 2*x + rnorm(n, mean = 0, sd = 5)\n\n# Création d'un scatterplot pour visualiser la relation entre les variables x et y\nplot(x, y, main = \"Scatterplot avec Données Simulées\", \n\n# Points bleus, ronds pleins\nxlab = \"X\", ylab = \"Y\", col = \"blue\", pch = 16)"
  },
  {
    "objectID": "datar.html#boxplot",
    "href": "datar.html#boxplot",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Un boxplot, également connu sous le nom de boîte à moustaches, est un type de visualisation de données qui représente graphiquement la distribution des données et permet de visualiser la médiane, les quartiles et les valeurs aberrantes éventuelles d’un ensemble de données.\n\n# Convertir la variable \"Mois\" en facteur avec un ordre spécifique des niveaux\ndata2$Mois &lt;- factor(data2$Mois, levels = c(\"Janvier\", \"Février\", \"Mars\", \"Avril\"))\n\n# Création du boxplot avec ggplot2\n\n# Boxplot avec coloration par mois\nggplot(data2, aes(x = Mois, y = Ventes, fill = Mois)) +\ngeom_boxplot() +\n\n# Titres et légendes\nlabs(title = \"Boxplot des ventes mensuelles\", x = \"Mois\", y = \"Ventes\", fill = \"Mois\") +  \n\n# Étiquettes de l'axe x inclinées\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "datar.html#lines",
    "href": "datar.html#lines",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Un lines plot, également appelé line chart ou graphique linéaire, est une forme de visualisation de données qui représente la relation entre deux variables quantitatives en traçant des points de données connectés par des lignes droites. Il est couramment utilisé pour montrer l’évolution ou les tendances des données sur une période de temps ou dans une séquence ordonnée.\n\n# Création du lines plot avec ggplot2\n\n# Lignes par produit\nggplot(data2, aes(x = Mois, y = Ventes, color = Produit, group = Produit)) +\ngeom_line() +\n\n# Points pour marquer les données\ngeom_point(size = 3) +\n\n# Titres et légendes\nlabs(title = \"Evolution des ventes mensuelles par produit\", x = \"Mois\", y = \"Ventes\", \ncolor = \"Produit\") +\n\n# Étiquettes de l'axe x inclinées\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "datar.html#pieplot",
    "href": "datar.html#pieplot",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "",
    "text": "Un pieplot, c’est un peu beaucoup inutile, et c’est moche en plus.\n\n# Charger les packages nécessaires\nlibrary(ggplot2)\n\n# Créer un dataframe avec vos données\n# Ces valeurs représentent les pourcentages pour chaque catégorie\ndonnees &lt;- data.frame(\n  categorie = c(\"Non\", \"Non en rouge\"),\n  valeur = c(80, 20)\n)\n\n# Créer le pie plot\ngraphique_pie &lt;- ggplot(donnees, aes(x = \"\", y = valeur, fill = categorie)) +\n\n  geom_bar(stat = \"identity\", width = 1) +\n  # Utiliser des coordonnées polaires pour le graphique en secteurs\n  coord_polar(\"y\", start = 0) +\n\n# Ajouter un titre\n  labs(title = \"Faut-il faire des camenberts ?\") +\n\n# Couleur bleue pour \"Non\" et rouge pour \"Non en rouge\"\n  scale_fill_manual(values = c(\"#1f77b4\", \"red\")) +\n\n# Supprimer les axes et le fond\n  theme_void() +\n\n# Placer la légende à droite du graphique\n  theme(legend.position = \"right\")\n\n# Afficher le pie plot\nprint(graphique_pie)"
  },
  {
    "objectID": "datar.html#changer-les-couleurs-et-les-styles-des-éléments",
    "href": "datar.html#changer-les-couleurs-et-les-styles-des-éléments",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Changer les couleurs et les styles des éléments",
    "text": "Changer les couleurs et les styles des éléments\n\n\nUtilisez les paramètres color et fill dans aes() pour changer les couleurs des points, des lignes ou des barres.\n\nUtilisez des échelles de couleurs personnalisées avec scale_color_manual() et scale_fill_manual() pour définir des couleurs spécifiques.\n\nUtilisez les paramètres linetype, shape, size pour modifier les styles des lignes, des points ou des barres.\n\n\nlibrary(ggplot2)\n\n# Exemple de graphique à points avec couleurs et styles personnalisés\ndata &lt;- data.frame(\n  Nom = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emma\"),\n  Age = c(25, 30, 35, 40, 45),\n  Salaire = c(50000, 60000, 70000, 80000, 90000)\n)\n\n# Création d'un graphique en barres pour visualiser la relation entre l'âge, le salaire \n# et l'individu\n\n# Définit Age sur l'axe X, Salaire sur Y, coloré par Nom\nggplot(data, aes(x = Age, y = Salaire, fill = Nom)) +\n\n# Affiche les barres séparées par Nom\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n\n  # Couleurs personnalisées pour chaque Nom\n  scale_fill_manual(values = c(\"Alice\" = \"#EB9C64\", \"Bob\" = \"#FF8789\", \n  \"Charlie\" = \"#8FBF9F\", \"David\" = \"#346145\", \"Emma\" = \"#554E4F\"))"
  },
  {
    "objectID": "datar.html#ajouter-des-titres-et-des-étiquettes",
    "href": "datar.html#ajouter-des-titres-et-des-étiquettes",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Ajouter des titres et des étiquettes",
    "text": "Ajouter des titres et des étiquettes\n\n\nUtilisez la fonction labs() pour ajouter des titres aux axes x et y, ainsi qu’un titre au graphique.\n\nUtilisez theme() pour ajuster l’apparence des titres et des étiquettes d’axe, par exemple en changeant la taille ou la police.\n\n\n# Création d'un graphique en barres avec Age en X et Salaire en Y, coloré par Nom\nggplot(data, aes(x = Age, y = Salaire, fill = Nom)) +\n\n# Barres individuelles par Nom, représentant le Salaire\n  geom_bar(stat = \"identity\", position = \"dodge\") +  \n\n# Titre et étiquettes des axes\n  labs(title = \"Salaire en fonction de l'âge\", x = \"Âge (ans)\", y = \"Salaire (€)\") +  \n\n# Style des titres des axes\n  theme(axis.title = element_text(size = 12, face = \"bold\"),  \n\n# Style du titre principal\n        plot.title = element_text(size = 14, face = \"bold\"))"
  },
  {
    "objectID": "datar.html#personnaliser-les-axes",
    "href": "datar.html#personnaliser-les-axes",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Personnaliser les axes",
    "text": "Personnaliser les axes\n\n\nUtilisez scale_x_continuous() ou scale_y_continuous() pour personnaliser les échelles des axes x et y, par exemple en définissant les limites ou les étiquettes des graduations.\n\nUtilisez theme() pour ajuster l’apparence des axes, par exemple en ajoutant des lignes de grille ou en modifiant les couleurs.\n\n\nggplot(data, aes(x = Age, y = Salaire, fill = Nom)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +  \n  # Utilise des barres séparées pour chaque Nom\n\n# Limite l'axe X de 20 à 50 ans avec des intervalles de 5 ans\n  scale_x_continuous(limits = c(20, 50), breaks = seq(20, 50, 5)) +\n\n# Limite l'axe Y de 0 à 100000 € avec des intervalles de 10000 €\n  scale_y_continuous(limits = c(0, 100000), breaks = seq(0, 100000, 10000)) +\n\n# Ajoute un titre et des étiquettes d'axe\n  labs(title = \"Salaire en fonction de l'âge\", x = \"Âge (ans)\", y = \"Salaire (€)\") +\n\n# Personnalise les lignes des axes\n  theme(axis.line = element_line(color = \"black\", linewidth = 0.5),\n\n# Personnalise les lignes de grille principales\n        panel.grid.major = element_line(color = \"gray\", linewidth = 0.5))"
  },
  {
    "objectID": "datar.html#modifier-les-légendes",
    "href": "datar.html#modifier-les-légendes",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Modifier les légendes",
    "text": "Modifier les légendes\n\n\nUtilisez guides() pour modifier l’apparence des légendes, par exemple en ajustant la position ou en désactivant une légende spécifique.\n\nUtilisez labs() pour renommer les légendes ou changer leur titre.\n\n\nggplot(data, aes(x = Age, y = Salaire, fill = Nom)) +\n\n# Barres pour chaque personne, séparées par âge\ngeom_bar(stat = \"identity\", position = \"dodge\") +\n\n# Ajout de titres et étiquettes d'axe\nlabs(title = \"Salaire en fonction de l'âge\", x = \"Âge (ans)\", y = \"Salaire (€)\") +\n\n# Ajout d'une légende avec titre pour les couleurs\nguides(fill = guide_legend(title = \"Nom\"))\n\n\n\n\n\n\n\n\nOn constate donc qu’il faut s’appeller Emma pour gagner beaucoup d’argent."
  },
  {
    "objectID": "datar.html#installation-des-packages-nécessaires",
    "href": "datar.html#installation-des-packages-nécessaires",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Installation des packages nécessaires",
    "text": "Installation des packages nécessaires"
  },
  {
    "objectID": "datar.html#créer-une-carte-avec-un-marqueur-sur-toulouse",
    "href": "datar.html#créer-une-carte-avec-un-marqueur-sur-toulouse",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Créer une carte avec un marqueur sur Toulouse",
    "text": "Créer une carte avec un marqueur sur Toulouse\n\n# Construction d'une carte interactive\nmap &lt;- leaflet() %&gt;% \n\n# Ajout de tuiles de carte par défaut (OpenStreetMap)\n  addTiles() %&gt;%\n\n# Ajout d'un marqueur à Toulouse avec un popup\n  addMarkers(lng = 1.43, lat = 43.6, popup = \"Ce marqueur est placé à Toulouse\")\n\n# Affiche la carte\nmap"
  },
  {
    "objectID": "datar.html#créer-un-dataframe-pour-ajouter-des-marqueurs-supplémentaires",
    "href": "datar.html#créer-un-dataframe-pour-ajouter-des-marqueurs-supplémentaires",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Créer un dataframe pour ajouter des marqueurs supplémentaires",
    "text": "Créer un dataframe pour ajouter des marqueurs supplémentaires\n\n# Création d'un data.frame avec des données de localisation pour Toulouse\ndataToulouse &lt;- data.frame(\n  lng = c(1.431889991011, 1.448399993334, 1.447109657227),  # Longitudes des lieux\n  lat = c(43.609126998861, 43.606276020224, 43.604503567579),  # Latitudes des lieux\n  label = c(\"The Botanist Pub\", \"IA School\", \"Jardin Pierre Goudouli\")  # Noms des lieux\n)"
  },
  {
    "objectID": "datar.html#affichage-de-la-carte-avec-le-code-en-intégralité",
    "href": "datar.html#affichage-de-la-carte-avec-le-code-en-intégralité",
    "title": "Créer des graphiques avec R en utilisant ggplot2",
    "section": "Affichage de la carte avec le code en intégralité",
    "text": "Affichage de la carte avec le code en intégralité\n\ndataToulouse &lt;- data.frame(\n  lng = c(1.431889991011, 1.448399993334, 1.447109657227),\n  lat = c(43.609126998861, 43.606276020224, 43.604503567579),\n  label = c(\"The Botanist Pub\", \"IA School\", \"Jardin Pierre Goudouli\")\n)\n\n# Initialisation d'une carte interactive avec des données spécifiques à Toulouse\nmap_Toulouse &lt;- leaflet(dataToulouse) %&gt;% \n\n# Ajout des tuiles par défaut d'OpenStreetMap\n  addTiles() %&gt;%\n\n# Ajout de marqueurs sur la carte avec des popups pour chaque lieu\n  addMarkers(~lng, ~lat, popup = ~label) %&gt;%\n\n# Utilisation de tuiles Stamen Toner Lite pour un style de carte différent\n  addProviderTiles(providers$Stamen.TonerLite)\n\n# Affichage de la carte\nmap_Toulouse\n\n\n\n\n\n\nMaintenant que vous savez créer des graphiques avec R, passons aux exercices !"
  }
]